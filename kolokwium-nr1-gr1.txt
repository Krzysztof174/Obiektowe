public class Main {
    static int[] ciagArytmetycznyRodzajuM(int n, int m, int a1, int[] r) {
        int[] tab = new int[n];
        if(m == 1) {
            tab = new int[n];
            tab[0] = a1;
            int currentInt = a1;
            for(int i = 1; i < n; i++) {
                tab[i] = currentInt + r[i - 1];
                currentInt = tab[i];
            }
        }
        if(m == 2) {
            tab = new int[n+1];
            tab[0] = 1;
            tab[1] = a1 + 1;
            for(int i = 1; i < n; i++) {
                tab[i] = 0;
            }
        }
        return tab;
    }
    static boolean czyCiagArytmetyczny(int[] tab) {
        if(tab.length < 3) {
            return true;
        }
        int a1 = tab[0];
        int r = tab[1] - a1;
        boolean arithmetic = true;
        int currentInt = a1 + r;
        for(int i = 2; i < tab.length; i++) {
            currentInt += r;
            if(currentInt != tab[i]) {
                arithmetic = false;
            }
        }
        return arithmetic;
    }
    static boolean czyCiagArytmetycznyRodzajuM(int[] tab, int m) {
        return true;
    }
    static int podciag(int[] tab) {
        if(tab.length == 0) return 0;
        int longest = 1;
        int count = 1;
        for(int i = 1; i < tab.length; i++) {
            if(tab[i - 1] < tab[i]) {
                count++;
                if(count > longest) longest = count;
                continue;
            }
            count = 1;
        }
        return longest;
    }
    static int podciag(int[] tab, int r) {
        if(tab.length == 0) return 0;
        int longest = 1;
        int count = 1;
        for(int i = 1; i < tab.length; i++) {
            if(tab[i] - tab[i - 1] != r) {
                count = 1;
                continue;
            }
            if(tab[i - 1] < tab[i]) {
                count++;
                if(count > longest) longest = count;
                continue;
            }
            count = 1;
        }
        return longest;
    }
    static void sekwencjaCollatza(int n, int c) {
        int currentInt = c;
        for(int i = 0; i < n; i++) {
            System.out.print(currentInt + " ");
            if(currentInt % 2 == 0) {
                currentInt = currentInt / 2;
                continue;
            }
            currentInt = currentInt * 3 + 1;
        }
        System.out.println("");
    }
    static void minMaxSekwencjaCollatza(int n, int c) {
        int currentInt = c;
        int min = c;
        int max = c;
        for(int i = 0; i < n; i++) {
            if(currentInt > max) max = currentInt;
            if(currentInt < min) min = currentInt;
            if(currentInt % 2 == 0) {
                currentInt = currentInt / 2;
                continue;
            }
            currentInt = currentInt * 3 + 1;
        }
        System.out.println("min=" + min);
        System.out.println("max=" + max);
    }

    public static void main(String[] args) {
        // 1
        int[] tablicaWart = {1, 2, 3, 4, 5};
        int[] tab = ciagArytmetycznyRodzajuM(6, 1, 1, tablicaWart);
        for(int i = 0; i < tab.length; i++) {
            System.out.print(tab[i] + " ");
        }
        System.out.println("");
        // 2
        int[] tab2 = {1, 3, 5};
        System.out.println(czyCiagArytmetyczny(tab2));
        System.out.println(czyCiagArytmetyczny(tab));
        // 3

        // 4 i 5
        int[] tab3 = {1, 3, -1, 2, 3, 4};
        System.out.println(podciag(tab3));
        System.out.println(podciag(tab3, 1));
        // 6
        sekwencjaCollatza(6, 51);
        // 7
        minMaxSekwencjaCollatza(6, 51);
    }
}